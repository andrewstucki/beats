// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by x-pack/dev-tools/cmd/buildspec/buildspec.go - DO NOT EDIT.

package program

import (
	"strings"

	"github.com/elastic/beats/v7/x-pack/elastic-agent/pkg/packer"
)

var Supported []Spec
var SupportedMap map[string]Spec

func init() {
	// Packed Files
	// spec/endpoint.yml
	// spec/filebeat.yml
	// spec/heartbeat.yml
	// spec/metricbeat.yml
	// spec/packetbeat.yml
	unpacked := packer.MustUnpack("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")
	SupportedMap = make(map[string]Spec)

	for f, v := range unpacked {
		s, err := NewSpecFromBytes(v)
		if err != nil {
			panic("Cannot read spec from " + f)
		}
		Supported = append(Supported, s)
		SupportedMap[strings.ToLower(s.Cmd)] = s
	}
}
