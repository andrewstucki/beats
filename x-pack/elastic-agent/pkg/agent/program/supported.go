// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License;
// you may not use this file except in compliance with the Elastic License.

// Code generated by x-pack/dev-tools/cmd/buildspec/buildspec.go - DO NOT EDIT.

package program

import (
	"strings"

	"github.com/elastic/beats/v7/x-pack/elastic-agent/pkg/packer"
)

var Supported []Spec
var SupportedMap map[string]Spec

func init() {
	// Packed Files
	// spec/endpoint.yml
	// spec/filebeat.yml
	// spec/heartbeat.yml
	// spec/metricbeat.yml
	// spec/packetbeat.yml
	unpacked := packer.MustUnpack("eJy8WV2Tm7ySvt+fkduztQtiPPuyVe+FzRRf42FiJiMJ3SHJNtgCcwLYxlv737cEmC97MsnmVC5SjplGarW6n36e9v98ybM1+891yrNDnBb/USXiy39/oYlZkG+HrY9me2bpGU1X23cAdxy7Gbf3zwFQ96/xQtDEP1EgSm6oF4I8lSVCWa+yiKV+RhJzx58OW9KvURALAiP1BEtJFoD3R+cp0F6fts8BiEQAik2IZhdumTl9Ojwv3xZibcEdBiSj1vujEc+3jrE4Bdg/vMbzeLgu632LW7uIJfzyuj1sHWO+Xb7NY57AKkRk5rTPuCUKgnRV+vhymT8zS79wU67nKQE656/bQ+FY8IEgb0MSkZNvh2f5nmMvIm5tHx3DvX/+N6exs8yKaC+t3/PCMdxubWfg1/JNVZnFqwD5YvK8Itg7cuzuCH6JB+t8sO/Ivlwn4nTvrN5ufjLSRUWgrtJElEzzI2qdHo1Y2RIciUDVkxCdxTV2zDKV8OmwdRJYEntxDNFMWWJPBBqsQux38Qywm7JLG6NrzNHs5sy3vrgqteCliTfJ1qZ+4bYrAqQ8OnahG+1zavuCCR0E6KwSfI3r4kLQWQSaf2S7wzZEsxPH/qX923eC94+O7c+Y9d7eHYmoDUXvpzLMz+c6BonIuQUrrE1sbU9QC+64pVev8SKj6ULl9kt714VYf6tzPQqSsyDz9qyJmXMEB3m4UFgKRX2m63p1zvnHLt4A5gR5CtXcy2u8oESuh1dlgLwdwd4FA/MUQl2eLXcskhMElWVSZEFilgFUxjna/d08hau6pooAzye1tEioBQVvfWYpzPv4zgvHdgVFOiDNntfn9b8QwNlrvIgC4AmmeZsALzIMCrFedeetCFKPPIGb2rY94zBmIRBxgGbR6J53tzEf3VkTk+77+N7nhWPpKrcX6vVMtR+YZAyII90enjmIBN0dttSCJdH8w7Ph/1ezpq8/v83/4TzNtwGa7R3rLGjCldDY7tdAlMyGCtOUzHl62L4Yi4gmq21omZc3AGdyDapBRdps3k5bF8A8wJ4SIu9CkFkFYJs+rw5/f/n3BnI3sVjTdXgDuRJqkCsCvLrCbF2OQQIjPs8aWIsX1IlV04lPWyf1BLfhaZmInL7NBE3MmFpw/xXJ9PVEbTO1TX1B8SIPsC+WCSwD5OYErXSSmDkD7/HSmMfL9+aTIrMMEBcUwZIbs4ICX3zF24JZ5i6s1CZ1DCd3DKfw3+SnW8jrJAAWRELFYH1uuyp5G9nmFPA0RLN0mZwFT2D+FfkiSGHqCOU5wK4SIhIF2urRsWRM/MuybgcwJshUPoWOuE6Nf8pywkCUxIIP1xTktjjJeFNLT9mpLo2MJpmEkg3T/Iogs8DaoqJNah+7lLT0EgPvSBOSh8hTGiiQLc3fBIgoBLfw38DOo2Odj0R7qaGFIvM0hdUJZFUcnUfwFAD9tIZ6RK3zhlv6hlriwp96mHWMhUIvh+3VZ3YaltiNryUF+mlYwgRHO4IXSp1TqaewBEYUv9R3H6JV/dnBWn3P7okleg1FEqLkPU18Vaiq5yH2lHG5C4XU9zKIafry/z1HH/MEJlRzW0iVrbGuo/auSEWB8uhYbemeri3or/6Z1p35uW2BCpPUxWzOgIH0W718dG9Tf0PsC/rt9hyjPU8fQvG4rdhdfvftIzFLBs4R7yjRfORXnderYezUiNmLHlK75+cjaalV/f9hvOu8IIKmq2NLfeo6Ge7nGAtZryU39Au3/EzCKdP8fYgeJvtAUOOA5u+Y9M/yTh+soxJ7/ujYcM/mY1/k3kvgHwNQyHNsiaXvQgCryTo5BezIErgPsbdh4Hzk4HwkMqfqZy+356/0yxp78r1Hx/Zm8p1rHH6mdXHsCQzutJpP3iOWqQSww6quflgCC6oRUbfQb6Mab6iM5UfcMjt8WiaziCJ4kVhMfqHlTvYv6+/YkxRA5qXsNwrB7mZKX3pq4tzUVEsFlDVeiDanJ1RNtmVTY8DLqQb3HJhKALY9duBMZcl70eSdf+DIGeDK+ciRn1BNUlB31q/nHWnqRyGaCdbXyJ4C73uHw5IuAP1IwFks8UINUk8NetsDt/0TBj217deOFG4v/smAXvbPiogkRdR/H+VLwbA/eH8muEVyqrHOD3p5AR4yVWIJZUiviCV66mK/DP7vKcQS5eD7NEeVQJt363Pkn3pbWIa4jy8Hoqxr+HfptNX18w8pdd3nV+OeWnOI1JcSL5E4v9aUGm/rnvFTeD3o+79EFXs+1d1DS9MG9yrWuKbcwkj5gaCHxzH16/deJr9PA5fGPG0xKV3WuMG/B4h8D95Y7hhcciIpgy+hwTJj+3dHGaN1+L24wxnfLCgldxObxCuI7E+jZ40Udcy843UMQIXjeRmic/EZB7zacgsWzKp7T9lxgic1CdD5MuF1Ew6oHon1rq8N9RQg7/sSNbJkxE0TNaKJmRKkyr4zXL+WTGNb2bt4RhNW0rq/nHRiwZgjFuPJ+KHmzfbLcRSPdNhX6xx5wFce8K3JzSYvpnXibTgQSmjqFUFcrO1534OvPWHUfxeVvB+cejOJaQT7WaC9HJdx3mH7x5j6Ayn6CRZ/WKt3JOmkZkf79jYDXEhfRryjrvEhZzHuS7BOqgE4Y3Kd5P2uDLtizuZtv/0az0+OZZbEWBwC7C0J3h9cuzhy7EsbXdYRQeeIaTKungiwuwuNuoYqgvyMVSyXvrqgwW23kvUo+bgn+93BrfbP19pK1sX3mN0prm8IKiwRu1aA7SiSYkQV3HazALRCrZl9bFHVFcCFYF9lxiyjlvJZsVxtJdE8UctUyGdCblIsFOl78k19WGKpxfOi1cc/EnL9+tivOJqIPktPiRRM1SyvG/KTuifIVUnlcgkm3BJJ0BDxuqBYpRcE+1WIvLbAFkem+aN5XpMUDTEZzdNGMyb1SOx6/lASoyZnUjSUa6R28yMpFGS8CV49SqChwK+LeZmsjkwTFwlSy1QU1JhJIngVLs/9XON+wQ+bVYhme4K316ZYk5rXeHE946VpQKIMk3p+0xIpdcNs9xgAeGFA74qHgtkmAHpJknPWCFlRMgArbuoRSf2OuHSCtM23ViRUMnco6uafCUv04lYo+Mf+mXf1p/VTjdjTZHZ5R/x8IDh2VFvMMDBzan4g7Jq9+z0H4HB79tmRdoSlIf9ryxPMXtXNqRNNVV0XWSs4u1xthhgjARnj1cRXzT9icM6YthrPqq7CbHBHI5H5S+fo7jAmiNRg9ofF4w1JxxrPuBVtWAJTgqNu0HCHmDdNKX74vgQtjmkv+x8SwD9LGn9TGMOPm/SPhLLtyhpfPz/pq6/N8OYfyzjPbmPUNlK5x9Nh6w7ny42IKwOkirHwaontyLYfekj85ugsekKqRiGAmwC7VTCdubY50uEE6IjsIFeuPnuib8w/IzAH7/2KoJ3Mvf+sCK6/X4bz4D8lpCcDgH+x4BlzDPnuNLdI6h6HuVBzFMk5bntD1yd/RTyN1u3vtiVgg/n7gNTdF1Cjs5TXfP8tEdUIp47o/ayIykK2X99TUe+WuQsBVEZEz5aEqhDcmhI9VvjNRp8QPWlzY/tDolez1Eo1G7b6U0SvVpTL9/f68xOiN7b9kOjxj4hereAI/lUl1ZGljCa+WA8m2NNJ/MT+h+TKMRZHKvQdBbOEWqJWfJJ0EuwqGJiJVDEdON5M5K9FPiRYHxflFazvNO8rue2J1k80+9tpfz/VYrbYBOicf0RmPiMszv2p+c30v7GDDwGAJxk7VPFuvSb/xL757Bp4M70YkiiZK2NF+EMi1uz52a8Bg2ZmT0iq8avErPZJrG2/CupfgqRP/qZupHigZj8jxz8gaNPcMLYfKHhV10LsH7DmCgLgwzBfbolaT0poAhUO9Cqs/iqfT3dU+e527/6XL4kfs+YXsOSv64/qf1Tp328Kf3qSdvj7y//+2/8FAAD//17BxtA=")
	SupportedMap = make(map[string]Spec)

	for f, v := range unpacked {
		s, err := NewSpecFromBytes(v)
		if err != nil {
			panic("Cannot read spec from " + f)
		}
		Supported = append(Supported, s)
		SupportedMap[strings.ToLower(s.Cmd)] = s
	}
}
