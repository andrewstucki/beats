// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mk_ecs_categorization - DO NOT EDIT.

package auditd

import (
	"github.com/elastic/go-libaudit/aucoalesce"
	"github.com/elastic/go-libaudit/auparse"
)

type ecsCategorizationFields struct {
	Categories []string
	Types      []string
}

type nestedCategorizationFields struct {
	Categories   []string
	DefaultTypes []string
	Types        map[auparse.AuditMessageType][]string
}

var ecsAuditdCategories = map[aucoalesce.AuditEventType]nestedCategorizationFields{
	aucoalesce.EventTypeAnomoly: nestedCategorizationFields{
		Categories:   []string{},
		DefaultTypes: []string{},
		Types:        map[auparse.AuditMessageType][]string{},
	},
	aucoalesce.EventTypeAnomolyResponse: nestedCategorizationFields{
		Categories:   []string{},
		DefaultTypes: []string{},
		Types:        map[auparse.AuditMessageType][]string{},
	},
	aucoalesce.EventTypeAuditDaemon: nestedCategorizationFields{
		Categories:   []string{"process"},
		DefaultTypes: []string{"info"},
		Types: map[auparse.AuditMessageType][]string{
			auparse.AUDIT_DAEMON_END:   []string{"end"},
			auparse.AUDIT_DAEMON_START: []string{"start"},
		},
	},
	aucoalesce.EventTypeAuditRule: nestedCategorizationFields{
		Categories:   []string{},
		DefaultTypes: []string{},
		Types:        map[auparse.AuditMessageType][]string{},
	},
	aucoalesce.EventTypeConfig: nestedCategorizationFields{
		Categories:   []string{},
		DefaultTypes: []string{},
		Types:        map[auparse.AuditMessageType][]string{},
	},
	aucoalesce.EventTypeCrypto: nestedCategorizationFields{
		Categories:   []string{},
		DefaultTypes: []string{},
		Types:        map[auparse.AuditMessageType][]string{},
	},
	aucoalesce.EventTypeDACDecision: nestedCategorizationFields{
		Categories:   []string{"process"},
		DefaultTypes: []string{"change"},
		Types:        map[auparse.AuditMessageType][]string{},
	},
	aucoalesce.EventTypeIntegrity: nestedCategorizationFields{
		Categories:   []string{},
		DefaultTypes: []string{},
		Types:        map[auparse.AuditMessageType][]string{},
	},
	aucoalesce.EventTypeMAC: nestedCategorizationFields{
		Categories:   []string{},
		DefaultTypes: []string{},
		Types:        map[auparse.AuditMessageType][]string{},
	},
	aucoalesce.EventTypeMACDecision: nestedCategorizationFields{
		Categories:   []string{},
		DefaultTypes: []string{},
		Types:        map[auparse.AuditMessageType][]string{},
	},
	aucoalesce.EventTypeSystemServices: nestedCategorizationFields{
		Categories:   []string{"host"},
		DefaultTypes: []string{"info"},
		Types: map[auparse.AuditMessageType][]string{
			auparse.AUDIT_SYSTEM_BOOT:     []string{"start"},
			auparse.AUDIT_SYSTEM_RUNLEVEL: []string{"change"},
			auparse.AUDIT_SYSTEM_SHUTDOWN: []string{"end"},
		},
	},
	aucoalesce.EventTypeUnknown: nestedCategorizationFields{
		Categories:   []string{},
		DefaultTypes: []string{},
		Types:        map[auparse.AuditMessageType][]string{},
	},
	aucoalesce.EventTypeUserAccount: nestedCategorizationFields{
		Categories:   []string{"iam"},
		DefaultTypes: []string{"info"},
		Types: map[auparse.AuditMessageType][]string{
			auparse.AUDIT_ADD_GROUP:     []string{"group", "creation"},
			auparse.AUDIT_ADD_USER:      []string{"user", "creation"},
			auparse.AUDIT_DEL_GROUP:     []string{"group", "deletion"},
			auparse.AUDIT_DEL_USER:      []string{"user", "deletion"},
			auparse.AUDIT_GRP_CHAUTHTOK: []string{"group", "change"},
			auparse.AUDIT_GRP_MGMT:      []string{"group", "change"},
			auparse.AUDIT_USER_MGMT:     []string{"user", "change"},
		},
	},
	aucoalesce.EventTypeUserLogin: nestedCategorizationFields{
		Categories:   []string{"authentication"},
		DefaultTypes: []string{"info"},
		Types: map[auparse.AuditMessageType][]string{
			auparse.AUDIT_USER_LOGIN:  []string{"start"},
			auparse.AUDIT_USER_LOGOUT: []string{"end"},
		},
	},
	aucoalesce.EventTypeUserspace: nestedCategorizationFields{
		Categories:   []string{"process"},
		DefaultTypes: []string{"info"},
		Types: map[auparse.AuditMessageType][]string{
			auparse.AUDIT_CHGRP_ID:  []string{"change"},
			auparse.AUDIT_CHUSER_ID: []string{"change"},
		},
	},
	aucoalesce.EventTypeVirt: nestedCategorizationFields{
		Categories:   []string{"host"},
		DefaultTypes: []string{"info"},
		Types:        map[auparse.AuditMessageType][]string{},
	},
}

var ecsAuditdCategoryOverrides = map[auparse.AuditMessageType]ecsCategorizationFields{
	auparse.AUDIT_EXECVE: ecsCategorizationFields{
		Categories: []string{"process"},
		Types:      []string{"start"},
	},
	auparse.AUDIT_ROLE_ASSIGN: ecsCategorizationFields{
		Categories: []string{"iam"},
		Types:      []string{"user", "change"},
	},
	auparse.AUDIT_ROLE_REMOVE: ecsCategorizationFields{
		Categories: []string{"iam"},
		Types:      []string{"user", "change"},
	},
	auparse.AUDIT_SERVICE_START: ecsCategorizationFields{
		Categories: []string{"process"},
		Types:      []string{"start"},
	},
	auparse.AUDIT_SERVICE_STOP: ecsCategorizationFields{
		Categories: []string{"process"},
		Types:      []string{"end"},
	},
	auparse.AUDIT_USER_CHAUTHTOK: ecsCategorizationFields{
		Categories: []string{"iam"},
		Types:      []string{"user", "change"},
	},
}

func getECSCategorization(eventType aucoalesce.AuditEventType, messageType auparse.AuditMessageType) ecsCategorizationFields {
	if found, ok := ecsAuditdCategoryOverrides[messageType]; ok {
		return found
	}
	if found, ok := ecsAuditdCategories[eventType]; ok {
		var types []string
		if mappedTypes, ok := found.Types[messageType]; ok {
			types = mappedTypes
		} else {
			types = found.DefaultTypes
		}
		return ecsCategorizationFields{
			Categories: found.Categories,
			Types:      types,
		}
	}

	return ecsCategorizationFields{}
}
