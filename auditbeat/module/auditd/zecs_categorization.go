// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by mkecs_categorization - DO NOT EDIT.

package auditd

import (
	"github.com/elastic/go-libaudit/aucoalesce"
	"github.com/elastic/go-libaudit/auparse"
)

type ecsCategorizationFields struct {
	Categories []string
	Types      []string
}

type nestedCategorizationFields struct {
	Categories   []string
	DefaultTypes []string
	Types        map[auparse.AuditMessageType][]string
}

var ecsAuditdCategories = map[aucoalesce.AuditEventType]nestedCategorizationFields{
	aucoalesce.EventTypeUserLogin: nestedCategorizationFields{
		Categories:   []string{"authentication"},
		DefaultTypes: []string{"info"},
		Types: map[auparse.AuditMessageType][]string{
			auparse.AUDIT_USER_LOGIN: []string{"start"},
		},
	},
}

var ecsAuditdCategoryOverrides = map[auparse.AuditMessageType]ecsCategorizationFields{}

func getECSCategorization(eventType aucoalesce.AuditEventType, messageType auparse.AuditMessageType) ecsCategorizationFields {
	if found, ok := ecsAuditdCategoryOverrides[messageType]; ok {
		return found
	}
	if found, ok := ecsAuditdCategories[eventType]; ok {
		var types []string
		if mappedTypes, ok := found.Types[messageType]; ok {
			types = mappedTypes
		} else {
			types = found.DefaultTypes
		}
		return ecsCategorizationFields{
			Categories: found.Categories,
			Types:      types,
		}
	}

	return ecsCategorizationFields{}
}
